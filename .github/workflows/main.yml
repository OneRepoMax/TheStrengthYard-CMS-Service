name: CI/CD Pipeline to deploy TSY-IABS Backend Application to AWS Elastic Beanstalk

on:
  push:
    branches:
      - sprint4/booking_staff

jobs:
  builddeploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Docker image
      run: docker build -t tsy-iabs-be .

    - name: Log in to Docker Hub
      uses: docker/login-action@v1.8.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        logout: true

    - name: Push Docker image to Docker Hub
      run: |
        docker tag tsy-iabs-be:latest ${{ secrets.DOCKERHUB_USERNAME }}/tsy-iabs-be:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/tsy-iabs-be:latest

    - name: Get Timestamp
      uses: gerred/actions/current-time@master
      id: current-time

    - name: Run String Replace
      uses: frabert/replace-string-action@master
      id: format-time
      with:
        pattern: '[:\.]+'
        string: "${{ steps.current-time.outputs.time }}"
        replace-with: '-'
        flags: 'g'

    - name: Generate Deployment Package
      run: |
        zip -r deploy.zip Dockerrun.aws.json
    
    # Deploy to existing AWS Elastic Beanstalk environment, called tsy-iabs-env
    - name: Deploy to AWS Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v21
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: tsy-iabs-be-app
        environment_name: tsy-iabs-env
        version_label: "docker-app-${{ steps.format-time.outputs.replaced }}"
        region: ap-southeast-1
        deployment_package: deploy.zip
    
    - name: Install AWS Elastic Beanstalk CLI
      run: |
        pip install --upgrade awsebcli
        eb --version

    - name: Initialize Elastic Beanstalk environment
      run: |
        eb init -r ap-southeast-1 -p "docker" tsy-iabs-env
        eb use tsy-iabs-env
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Set Environment Variables
      env:
        DB_HOSTNAME: ${{ secrets.DB_HOSTNAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        PAYPAL_CLIENT_ID: ${{ secrets.PAYPAL_CLIENT_ID }}
        PAYPAL_CLIENT_SECRET: ${{ secrets.PAYPAL_CLIENT_SECRET }}
        SECURITY_PASSWORD_SALT: ${{ secrets.SECURITY_PASSWORD_SALT }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        eb setenv \
            DB_HOSTNAME=$DB_HOSTNAME \
            DB_USERNAME=$DB_USERNAME \
            DB_PASSWORD=$DB_PASSWORD \
            DB_PORT=$DB_PORT \
            DB_NAME=$DB_NAME \
            AWS_ACCESS_KEY=$AWS_ACCESS_KEY \
            AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            PAYPAL_CLIENT_ID=$PAYPAL_CLIENT_ID \
            PAYPAL_CLIENT_SECRET=$PAYPAL_CLIENT_SECRET \
            SECURITY_PASSWORD_SALT=$SECURITY_PASSWORD_SALT \
            EMAIL_USER=$EMAIL_USER \
            EMAIL_PASSWORD=$EMAIL_PASSWORD \
            OPENAI_API_KEY=$OPENAI_API_KEY \